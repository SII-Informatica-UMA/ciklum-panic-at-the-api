/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EntrenadorDTO } from '../model/entrenadorDTO';
import { EntrenadorNuevoDTO } from '../model/entrenadorNuevoDTO';
import { MensajeDTO } from '../model/mensajeDTO';
import { MensajeNuevoDTO } from '../model/mensajeNuevoDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GestionDeEntrenadoresYSusMensajesService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Actualiza un entrenador
     * @param body 
     * @param idEntrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public actualizarEntrenador(body: EntrenadorDTO, idEntrenador: number, observe?: 'body', reportProgress?: boolean): Observable<EntrenadorDTO>;
    public actualizarEntrenador(body: EntrenadorDTO, idEntrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntrenadorDTO>>;
    public actualizarEntrenador(body: EntrenadorDTO, idEntrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntrenadorDTO>>;
    public actualizarEntrenador(body: EntrenadorDTO, idEntrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling actualizarEntrenador.');
        }

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling actualizarEntrenador.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EntrenadorDTO>('put',`${this.basePath}/entrenador/${encodeURIComponent(String(idEntrenador))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Crea un nuevo entrenador asociado al centro en el sistema. Tiene que existir un usuario ya creado para este entrenador.
     * @param body 
     * @param centro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearEntrenador(body: EntrenadorNuevoDTO, centro: number, observe?: 'body', reportProgress?: boolean): Observable<EntrenadorDTO>;
    public crearEntrenador(body: EntrenadorNuevoDTO, centro: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntrenadorDTO>>;
    public crearEntrenador(body: EntrenadorNuevoDTO, centro: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntrenadorDTO>>;
    public crearEntrenador(body: EntrenadorNuevoDTO, centro: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling crearEntrenador.');
        }

        if (centro === null || centro === undefined) {
            throw new Error('Required parameter centro was null or undefined when calling crearEntrenador.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (centro !== undefined && centro !== null) {
            queryParameters = queryParameters.set('centro', <any>centro);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EntrenadorDTO>('post',`${this.basePath}/entrenador`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite crear un mensaje nuevo a un entrenador (para ser enviado). 
     * @param body 
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearMensaje(body: MensajeNuevoDTO, entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<MensajeDTO>;
    public crearMensaje(body: MensajeNuevoDTO, entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MensajeDTO>>;
    public crearMensaje(body: MensajeNuevoDTO, entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MensajeDTO>>;
    public crearMensaje(body: MensajeNuevoDTO, entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling crearMensaje.');
        }

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling crearMensaje.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MensajeDTO>('post',`${this.basePath}/mensaje/entrenador`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina el entrenador.
     * @param idEntrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarEntrenador(idEntrenador: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarEntrenador(idEntrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarEntrenador(idEntrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarEntrenador(idEntrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling eliminarEntrenador.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/entrenador/${encodeURIComponent(String(idEntrenador))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina el mensaje.
     * @param idMensaje 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarMensaje(idMensaje: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarMensaje(idMensaje: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarMensaje(idMensaje: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarMensaje(idMensaje: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMensaje === null || idMensaje === undefined) {
            throw new Error('Required parameter idMensaje was null or undefined when calling eliminarMensaje.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/mensaje/entrenador/${encodeURIComponent(String(idMensaje))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene un cliente concreto
     * @param idEntrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntrenador(idEntrenador: number, observe?: 'body', reportProgress?: boolean): Observable<EntrenadorDTO>;
    public getEntrenador(idEntrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntrenadorDTO>>;
    public getEntrenador(idEntrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntrenadorDTO>>;
    public getEntrenador(idEntrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling getEntrenador.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EntrenadorDTO>('get',`${this.basePath}/entrenador/${encodeURIComponent(String(idEntrenador))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene un mensaje de un entrenador concreto
     * @param idMensaje 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMensajeEntrenador(idMensaje: number, observe?: 'body', reportProgress?: boolean): Observable<MensajeDTO>;
    public getMensajeEntrenador(idMensaje: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MensajeDTO>>;
    public getMensajeEntrenador(idMensaje: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MensajeDTO>>;
    public getMensajeEntrenador(idMensaje: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMensaje === null || idMensaje === undefined) {
            throw new Error('Required parameter idMensaje was null or undefined when calling getMensajeEntrenador.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MensajeDTO>('get',`${this.basePath}/mensaje/entrenador/${encodeURIComponent(String(idMensaje))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene la lista de entrenadores de un centro. Lo pueden hacer los gerentes de ese centro.
     * @param centro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public obtenerEntrenadores(centro: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EntrenadorDTO>>;
    public obtenerEntrenadores(centro: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EntrenadorDTO>>>;
    public obtenerEntrenadores(centro: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EntrenadorDTO>>>;
    public obtenerEntrenadores(centro: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (centro === null || centro === undefined) {
            throw new Error('Required parameter centro was null or undefined when calling obtenerEntrenadores.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (centro !== undefined && centro !== null) {
            queryParameters = queryParameters.set('centro', <any>centro);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EntrenadorDTO>>('get',`${this.basePath}/entrenador`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite consultar todos los mensajes de un entrenador.
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public obtenerMensajesCliente(entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MensajeDTO>>;
    public obtenerMensajesCliente(entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MensajeDTO>>>;
    public obtenerMensajesCliente(entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MensajeDTO>>>;
    public obtenerMensajesCliente(entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling obtenerMensajesCliente.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MensajeDTO>>('get',`${this.basePath}/mensaje/entrenador`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
