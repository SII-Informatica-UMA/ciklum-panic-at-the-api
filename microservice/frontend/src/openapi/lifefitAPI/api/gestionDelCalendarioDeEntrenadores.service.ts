/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EventoDTO } from '../model/eventoDTO';
import { EventoNuevoDTO } from '../model/eventoNuevoDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GestionDelCalendarioDeEntrenadoresService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Actualiza un evento. El entrenador puede hacer cualquier modificación, el cliente solo puede modificar las citas que tengan su identificador (asociadas al usuario.
     * @param body 
     * @param idEntrenador 
     * @param idElemento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public actualizarEvento(body: EventoDTO, idEntrenador: number, idElemento: number, observe?: 'body', reportProgress?: boolean): Observable<EventoDTO>;
    public actualizarEvento(body: EventoDTO, idEntrenador: number, idElemento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventoDTO>>;
    public actualizarEvento(body: EventoDTO, idEntrenador: number, idElemento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventoDTO>>;
    public actualizarEvento(body: EventoDTO, idEntrenador: number, idElemento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling actualizarEvento.');
        }

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling actualizarEvento.');
        }

        if (idElemento === null || idElemento === undefined) {
            throw new Error('Required parameter idElemento was null or undefined when calling actualizarEvento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EventoDTO>('put',`${this.basePath}/calendario/${encodeURIComponent(String(idEntrenador))}/${encodeURIComponent(String(idElemento))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite crear un evento nuevo a un entrenador (para ser añadido a su calendario). Esto lo puede hacer tanto el cliente como el propio entrenador. El entrenador también podrá añadir nuevas franjas de disponibilidad.
     * @param body 
     * @param idEntrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearEvento(body: EventoNuevoDTO, idEntrenador: number, observe?: 'body', reportProgress?: boolean): Observable<EventoDTO>;
    public crearEvento(body: EventoNuevoDTO, idEntrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventoDTO>>;
    public crearEvento(body: EventoNuevoDTO, idEntrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventoDTO>>;
    public crearEvento(body: EventoNuevoDTO, idEntrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling crearEvento.');
        }

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling crearEvento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EventoDTO>('post',`${this.basePath}/calendario/${encodeURIComponent(String(idEntrenador))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina el evento. El entrenador puede eliminar cualquier evento, el cliente solo puede eliminar las citas que tengan su identificador (asociadas al usuario).
     * @param idEntrenador 
     * @param idElemento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarEvento(idEntrenador: number, idElemento: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarEvento(idEntrenador: number, idElemento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarEvento(idEntrenador: number, idElemento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarEvento(idEntrenador: number, idElemento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling eliminarEvento.');
        }

        if (idElemento === null || idElemento === undefined) {
            throw new Error('Required parameter idElemento was null or undefined when calling eliminarEvento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/calendario/${encodeURIComponent(String(idEntrenador))}/${encodeURIComponent(String(idElemento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene un evento concreto del calendario
     * @param idEntrenador 
     * @param idElemento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEvento(idEntrenador: number, idElemento: number, observe?: 'body', reportProgress?: boolean): Observable<EventoDTO>;
    public getEvento(idEntrenador: number, idElemento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventoDTO>>;
    public getEvento(idEntrenador: number, idElemento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventoDTO>>;
    public getEvento(idEntrenador: number, idElemento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling getEvento.');
        }

        if (idElemento === null || idElemento === undefined) {
            throw new Error('Required parameter idElemento was null or undefined when calling getEvento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EventoDTO>('get',`${this.basePath}/calendario/${encodeURIComponent(String(idEntrenador))}/${encodeURIComponent(String(idElemento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite consultar la disponibilidad de un entrenador.
     * @param idEntrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public obtenerEventosEntrenador(idEntrenador: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EventoDTO>>;
    public obtenerEventosEntrenador(idEntrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventoDTO>>>;
    public obtenerEventosEntrenador(idEntrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventoDTO>>>;
    public obtenerEventosEntrenador(idEntrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEntrenador === null || idEntrenador === undefined) {
            throw new Error('Required parameter idEntrenador was null or undefined when calling obtenerEventosEntrenador.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EventoDTO>>('get',`${this.basePath}/calendario/${encodeURIComponent(String(idEntrenador))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
