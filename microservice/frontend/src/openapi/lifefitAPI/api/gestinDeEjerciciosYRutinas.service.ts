/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EjercicioDTO } from '../model/ejercicioDTO';
import { EjercicioNuevoDTO } from '../model/ejercicioNuevoDTO';
import { RutinaDTO } from '../model/rutinaDTO';
import { RutinaNuevaDTO } from '../model/rutinaNuevaDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GestinDeEjerciciosYRutinasService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Actualiza un ejercicio. Solo puede hacerlo el entrenador que lo ha creado.
     * @param body 
     * @param idEjercicio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public actualizarEjercicio(body: EjercicioDTO, idEjercicio: number, observe?: 'body', reportProgress?: boolean): Observable<EjercicioDTO>;
    public actualizarEjercicio(body: EjercicioDTO, idEjercicio: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EjercicioDTO>>;
    public actualizarEjercicio(body: EjercicioDTO, idEjercicio: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EjercicioDTO>>;
    public actualizarEjercicio(body: EjercicioDTO, idEjercicio: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling actualizarEjercicio.');
        }

        if (idEjercicio === null || idEjercicio === undefined) {
            throw new Error('Required parameter idEjercicio was null or undefined when calling actualizarEjercicio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EjercicioDTO>('put',`${this.basePath}/ejercicio/${encodeURIComponent(String(idEjercicio))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Actualiza una rutina. Solo puede hacerlo el entrenador que lo ha creado.
     * @param body 
     * @param idRutina 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public actualizarRutina(body: RutinaDTO, idRutina: number, observe?: 'body', reportProgress?: boolean): Observable<RutinaDTO>;
    public actualizarRutina(body: RutinaDTO, idRutina: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RutinaDTO>>;
    public actualizarRutina(body: RutinaDTO, idRutina: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RutinaDTO>>;
    public actualizarRutina(body: RutinaDTO, idRutina: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling actualizarRutina.');
        }

        if (idRutina === null || idRutina === undefined) {
            throw new Error('Required parameter idRutina was null or undefined when calling actualizarRutina.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RutinaDTO>('put',`${this.basePath}/rutina/${encodeURIComponent(String(idRutina))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite crear un ejercicio nuevo a un entrenador. 
     * @param body 
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearEjercicio(body: EjercicioNuevoDTO, entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<EjercicioDTO>;
    public crearEjercicio(body: EjercicioNuevoDTO, entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EjercicioDTO>>;
    public crearEjercicio(body: EjercicioNuevoDTO, entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EjercicioDTO>>;
    public crearEjercicio(body: EjercicioNuevoDTO, entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling crearEjercicio.');
        }

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling crearEjercicio.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EjercicioDTO>('post',`${this.basePath}/ejercicio`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite crear una rutina nueva a un entrenador. Los ejercicios usados deben existir previamente.
     * @param body 
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearRutina(body: RutinaNuevaDTO, entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<RutinaDTO>;
    public crearRutina(body: RutinaNuevaDTO, entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RutinaDTO>>;
    public crearRutina(body: RutinaNuevaDTO, entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RutinaDTO>>;
    public crearRutina(body: RutinaNuevaDTO, entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling crearRutina.');
        }

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling crearRutina.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RutinaDTO>('post',`${this.basePath}/rutina`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina el ejercicio. Solo puede hacerlo el entrenador que lo ha creado.
     * @param idEjercicio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarEjercicio(idEjercicio: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarEjercicio(idEjercicio: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarEjercicio(idEjercicio: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarEjercicio(idEjercicio: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEjercicio === null || idEjercicio === undefined) {
            throw new Error('Required parameter idEjercicio was null or undefined when calling eliminarEjercicio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/ejercicio/${encodeURIComponent(String(idEjercicio))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina la rutina. Solo puede hacerlo el entrenador que la ha creado.
     * @param idRutina 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarRutina(idRutina: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarRutina(idRutina: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarRutina(idRutina: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarRutina(idRutina: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idRutina === null || idRutina === undefined) {
            throw new Error('Required parameter idRutina was null or undefined when calling eliminarRutina.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/rutina/${encodeURIComponent(String(idRutina))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene un ejercicio concreto. Sollo pued ehacerlo el entrenador que lo ha creado y los clientes que entrena.
     * @param idEjercicio 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEjercicio(idEjercicio: number, observe?: 'body', reportProgress?: boolean): Observable<EjercicioDTO>;
    public getEjercicio(idEjercicio: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EjercicioDTO>>;
    public getEjercicio(idEjercicio: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EjercicioDTO>>;
    public getEjercicio(idEjercicio: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEjercicio === null || idEjercicio === undefined) {
            throw new Error('Required parameter idEjercicio was null or undefined when calling getEjercicio.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EjercicioDTO>('get',`${this.basePath}/ejercicio/${encodeURIComponent(String(idEjercicio))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Obtiene una rutina concreta. Solo puede hacerlo el entrenador que la ha creado y los clientes que entrena.
     * @param idRutina 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRutina(idRutina: number, observe?: 'body', reportProgress?: boolean): Observable<RutinaDTO>;
    public getRutina(idRutina: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RutinaDTO>>;
    public getRutina(idRutina: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RutinaDTO>>;
    public getRutina(idRutina: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idRutina === null || idRutina === undefined) {
            throw new Error('Required parameter idRutina was null or undefined when calling getRutina.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RutinaDTO>('get',`${this.basePath}/rutina/${encodeURIComponent(String(idRutina))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite consultar todos los ejercicios a un entrenador. Solo lo puede hacer el entrenador.
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public obtenerEjercicios(entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EjercicioDTO>>;
    public obtenerEjercicios(entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EjercicioDTO>>>;
    public obtenerEjercicios(entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EjercicioDTO>>>;
    public obtenerEjercicios(entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling obtenerEjercicios.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EjercicioDTO>>('get',`${this.basePath}/ejercicio`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Permite consultar todas las rutinas a un entrenador. Solo lo puede hacer el entrenador.
     * @param entrenador 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public obtenerRutinas(entrenador: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RutinaDTO>>;
    public obtenerRutinas(entrenador: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RutinaDTO>>>;
    public obtenerRutinas(entrenador: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RutinaDTO>>>;
    public obtenerRutinas(entrenador: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entrenador === null || entrenador === undefined) {
            throw new Error('Required parameter entrenador was null or undefined when calling obtenerRutinas.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entrenador !== undefined && entrenador !== null) {
            queryParameters = queryParameters.set('entrenador', <any>entrenador);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<RutinaDTO>>('get',`${this.basePath}/rutina`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
